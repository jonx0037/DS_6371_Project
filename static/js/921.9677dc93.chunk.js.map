{"version":3,"file":"static/js/921.9677dc93.chunk.js","mappings":"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","sources":["components/visualizations/NeighborhoodPricePlot.js","pages/AnalysisCentury21Page.js","components/SEO/SEO.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport { Box, Card, CardContent, Typography, FormGroup, FormControlLabel, Checkbox, Grid } from '@mui/material';\n\n// This component will simulate the Shiny app functionality in the R Markdown file\n// It shows the relationship between house prices and living area by neighborhood\n\n// Sample data based on the Century 21 neighborhood analysis\n// In a real implementation, this would be loaded from a JSON file\nconst sampleData = {\n  NAmes: {\n    GrLivArea: [854, 1188, 1288, 1344, 1442, 1532, 1656, 1774, 1800, 1880, 1936, 2010],\n    SalePrice: [115000, 153500, 161500, 170000, 166000, 157000, 181000, 191000, 188000, 195000, 218000, 246000],\n    color: '#1f77b4'\n  },\n  Edwards: {\n    GrLivArea: [733, 810, 968, 1022, 1126, 1264, 1362, 1444, 1744, 1836, 2073, 2176],\n    SalePrice: [85000, 86000, 87550, 84500, 116000, 142500, 130000, 123000, 169900, 194500, 159000, 137500],\n    color: '#ff7f0e'\n  },\n  BrkSide: {\n    GrLivArea: [720, 796, 854, 988, 1052, 1142, 1212, 1326, 1442, 1631, 1768, 2269],\n    SalePrice: [82000, 86000, 115000, 118000, 127000, 125000, 145000, 158000, 155000, 176000, 196000, 190000],\n    color: '#2ca02c'\n  }\n};\n\nconst NeighborhoodPricePlot = () => {\n  // State for user selections (similar to Shiny app inputs)\n  const [selectedNeighborhoods, setSelectedNeighborhoods] = useState({\n    NAmes: true,\n    Edwards: true,\n    BrkSide: true\n  });\n  const [showRegression, setShowRegression] = useState(true);\n  const [showConfidence, setShowConfidence] = useState(true);\n  \n  // Handler for neighborhood selection changes\n  const handleNeighborhoodChange = (event) => {\n    setSelectedNeighborhoods({\n      ...selectedNeighborhoods,\n      [event.target.name]: event.target.checked\n    });\n  };\n\n  // Prepare plot data based on user selections\n  const plotData = [];\n  \n  Object.keys(selectedNeighborhoods).forEach(neighborhood => {\n    if (selectedNeighborhoods[neighborhood]) {\n      // Add scatter plot for each selected neighborhood\n      plotData.push({\n        x: sampleData[neighborhood].GrLivArea,\n        y: sampleData[neighborhood].SalePrice,\n        type: 'scatter',\n        mode: 'markers',\n        name: neighborhood,\n        marker: {\n          color: sampleData[neighborhood].color,\n          size: 8\n        }\n      });\n      \n      // Add regression line if requested\n      if (showRegression) {\n        // Simple linear regression calculation\n        // In a real implementation, coefficients would be pre-calculated or calculated using a library\n        const x = sampleData[neighborhood].GrLivArea;\n        const y = sampleData[neighborhood].SalePrice;\n        \n        // Calculate mean of x and y\n        const xMean = x.reduce((a, b) => a + b, 0) / x.length;\n        const yMean = y.reduce((a, b) => a + b, 0) / y.length;\n        \n        // Calculate coefficients\n        let numerator = 0;\n        let denominator = 0;\n        \n        for (let i = 0; i < x.length; i++) {\n          numerator += (x[i] - xMean) * (y[i] - yMean);\n          denominator += (x[i] - xMean) * (x[i] - xMean);\n        }\n        \n        const slope = numerator / denominator;\n        const intercept = yMean - slope * xMean;\n        \n        // Create x values for line\n        const minX = Math.min(...x);\n        const maxX = Math.max(...x);\n        const lineX = [minX, maxX];\n        const lineY = [slope * minX + intercept, slope * maxX + intercept];\n        \n        // Add regression line\n        plotData.push({\n          x: lineX,\n          y: lineY,\n          type: 'scatter',\n          mode: 'lines',\n          name: `${neighborhood} Regression`,\n          line: {\n            color: sampleData[neighborhood].color,\n            width: 2\n          },\n          showlegend: false\n        });\n        \n        // Add confidence interval if requested\n        if (showConfidence) {\n          // In a real implementation, this would be calculated properly\n          // For this demo, we'll just show lines 10% above and below the regression line\n          plotData.push({\n            x: lineX,\n            y: [lineY[0] * 1.1, lineY[1] * 1.1],\n            type: 'scatter',\n            mode: 'lines',\n            name: `${neighborhood} Upper CI`,\n            line: {\n              color: sampleData[neighborhood].color,\n              width: 1,\n              dash: 'dash'\n            },\n            showlegend: false\n          });\n          \n          plotData.push({\n            x: lineX,\n            y: [lineY[0] * 0.9, lineY[1] * 0.9],\n            type: 'scatter',\n            mode: 'lines',\n            name: `${neighborhood} Lower CI`,\n            line: {\n              color: sampleData[neighborhood].color,\n              width: 1,\n              dash: 'dash'\n            },\n            fill: 'tonexty',\n            fillcolor: `rgba(${sampleData[neighborhood].color.replace('rgb', '').replace('(', '').replace(')', '')}, 0.1)`,\n            showlegend: false\n          });\n        }\n      }\n    }\n  });\n  \n  // Plot layout\n  const layout = {\n    title: 'Sale Price vs. Living Area by Neighborhood',\n    xaxis: {\n      title: 'Above Grade (Ground) Living Area (sq ft)'\n    },\n    yaxis: {\n      title: 'Sale Price ($)',\n      tickformat: '$,.0f'\n    },\n    hovermode: 'closest',\n    legend: {\n      x: 0,\n      y: 1\n    },\n    autosize: true,\n    height: 500,\n    margin: {\n      l: 60,\n      r: 30,\n      b: 60,\n      t: 80,\n      pad: 4\n    }\n  };\n  \n  // Generate neighborhood stats for display\n  const generateNeighborhoodStats = () => {\n    const stats = [];\n    \n    Object.keys(selectedNeighborhoods).forEach(neighborhood => {\n      if (selectedNeighborhoods[neighborhood]) {\n        const prices = sampleData[neighborhood].SalePrice;\n        const areas = sampleData[neighborhood].GrLivArea;\n        \n        stats.push({\n          neighborhood,\n          count: prices.length,\n          meanPrice: prices.reduce((a, b) => a + b, 0) / prices.length,\n          medianPrice: [...prices].sort((a, b) => a - b)[Math.floor(prices.length / 2)],\n          meanArea: areas.reduce((a, b) => a + b, 0) / areas.length,\n          medianArea: [...areas].sort((a, b) => a - b)[Math.floor(areas.length / 2)],\n          pricePerSqFt: (prices.reduce((a, b) => a + b, 0) / prices.length) / (areas.reduce((a, b) => a + b, 0) / areas.length)\n        });\n      }\n    });\n    \n    return stats;\n  };\n  \n  const neighborhoodStats = generateNeighborhoodStats();\n  \n  return (\n    <Card className=\"visualization-container\">\n      <CardContent>\n        <Typography variant=\"h5\" component=\"h2\" className=\"section-title\" gutterBottom>\n          House Price vs. Living Area by Neighborhood\n        </Typography>\n        \n        <Grid container spacing={3}>\n          <Grid item xs={12} md={9}>\n            <Plot\n              data={plotData}\n              layout={layout}\n              style={{ width: '100%' }}\n              useResizeHandler={true}\n              config={{ responsive: true }}\n            />\n          </Grid>\n          \n          <Grid item xs={12} md={3}>\n            <Box sx={{ mb: 3 }}>\n              <Typography variant=\"h6\" gutterBottom>\n                Options\n              </Typography>\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={selectedNeighborhoods.NAmes}\n                      onChange={handleNeighborhoodChange}\n                      name=\"NAmes\"\n                    />\n                  }\n                  label=\"NAmes\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={selectedNeighborhoods.Edwards}\n                      onChange={handleNeighborhoodChange}\n                      name=\"Edwards\"\n                    />\n                  }\n                  label=\"Edwards\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={selectedNeighborhoods.BrkSide}\n                      onChange={handleNeighborhoodChange}\n                      name=\"BrkSide\"\n                    />\n                  }\n                  label=\"BrkSide\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={showRegression}\n                      onChange={(e) => setShowRegression(e.target.checked)}\n                      name=\"showRegression\"\n                    />\n                  }\n                  label=\"Show Regression Line\"\n                />\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={showConfidence}\n                      onChange={(e) => setShowConfidence(e.target.checked)}\n                      name=\"showConfidence\"\n                      disabled={!showRegression}\n                    />\n                  }\n                  label=\"Show Confidence Interval\"\n                />\n              </FormGroup>\n            </Box>\n          </Grid>\n        </Grid>\n        \n        {/* Neighborhood Statistics Table */}\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            Neighborhood Statistics\n          </Typography>\n          <Box sx={{ overflowX: 'auto' }}>\n            <table style={{ width: '100%', borderCollapse: 'collapse' }}>\n              <thead>\n                <tr>\n                  <th style={{ textAlign: 'left', padding: '8px', borderBottom: '1px solid #ddd' }}>Neighborhood</th>\n                  <th style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>Count</th>\n                  <th style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>Mean Price</th>\n                  <th style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>Median Price</th>\n                  <th style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>Mean Area</th>\n                  <th style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>Median Area</th>\n                  <th style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>Price per sq ft</th>\n                </tr>\n              </thead>\n              <tbody>\n                {neighborhoodStats.map((stat) => (\n                  <tr key={stat.neighborhood}>\n                    <td style={{ padding: '8px', borderBottom: '1px solid #ddd' }}>{stat.neighborhood}</td>\n                    <td style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>{stat.count}</td>\n                    <td style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>${stat.meanPrice.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>\n                    <td style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>${stat.medianPrice.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>\n                    <td style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>{stat.meanArea.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>\n                    <td style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>{stat.medianArea.toLocaleString(undefined, { maximumFractionDigits: 0 })}</td>\n                    <td style={{ textAlign: 'right', padding: '8px', borderBottom: '1px solid #ddd' }}>${stat.pricePerSqFt.toLocaleString(undefined, { maximumFractionDigits: 2 })}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </Box>\n        </Box>\n        \n        <Box sx={{ mt: 3 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Note: This interactive visualization is a web-based recreation of the R Shiny app from the original analysis.\n            For the full functionality, you can access the original R Shiny application.\n          </Typography>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default NeighborhoodPricePlot;","import React from 'react';\nimport { Box, Container, Typography, Card, CardContent, Button, Grid, Divider } from '@mui/material';\nimport NeighborhoodPricePlot from '../components/visualizations/NeighborhoodPricePlot';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport SEO from '../components/SEO/SEO';\n\nconst AnalysisCentury21Page = () => {\n  // Define breadcrumbs for this page\n  const pageBreadcrumbs = [\n    { name: \"Home\", url: \"/\" },\n    { name: \"Century 21 Neighborhood Analysis\", url: \"/analysis-century21\" }\n  ];\n\n  return (\n    <Container maxWidth=\"lg\">\n      <SEO \n        title=\"Century 21 Neighborhood Analysis\" \n        description=\"Analysis of housing prices in relation to living area across NAmes, Edwards, and BrkSide neighborhoods for Century 21 Ames real estate company.\" \n        keywords=\"Century 21 Ames, NAmes, Edwards, BrkSide, housing prices, living area, regression analysis, house valuation\"\n        url=\"/analysis-century21\"\n        breadcrumbs={pageBreadcrumbs}\n      />\n      \n      <Box sx={{ my: 4 }}>\n        <Typography variant=\"h3\" component=\"h1\" gutterBottom className=\"section-title\">\n          Analysis 1: Century 21 Ames Neighborhood Analysis\n        </Typography>\n        \n        <Typography variant=\"h5\" component=\"h2\" gutterBottom sx={{ mb: 3 }}>\n          Analyzing house prices in relation to living area across three key neighborhoods\n        </Typography>\n        \n        {/* Problem Statement */}\n        <Card sx={{ mb: 4 }}>\n          <CardContent>\n            <Typography variant=\"h5\" component=\"h2\" gutterBottom>\n              Problem Statement\n            </Typography>\n            <Typography variant=\"body1\" paragraph>\n              Century 21 Ames, a real estate company in Ames, Iowa, commissioned this analysis to understand how the sale price \n              of houses is related to the square footage of the living area (GrLivArea) and whether this relationship varies by neighborhood. \n              The company only sells houses in three neighborhoods: NAmes, Edwards, and BrkSide.\n            </Typography>\n            <Typography variant=\"body1\">\n              Our objectives were to:\n            </Typography>\n            <ul>\n              <li>\n                <Typography variant=\"body1\">\n                  Build a model that relates sale price to living area\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\">\n                  Determine if this relationship differs by neighborhood\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\">\n                  Provide estimates and confidence intervals for the relationship\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\">\n                  Ensure model assumptions are met and address any outliers\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\">\n                  Present the results in terms of 100 sq. ft. increments of living area\n                </Typography>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n        \n        {/* Interactive Visualization */}\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom sx={{ mt: 5, mb: 3 }}>\n          Interactive Visualization\n        </Typography>\n        \n        <NeighborhoodPricePlot />\n        \n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 3 }}>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            endIcon={<OpenInNewIcon />}\n            component=\"a\"\n            href=\"https://example.shinyapps.io/century21-analysis\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Open Full Shiny App\n          </Button>\n        </Box>\n        \n        <Divider sx={{ my: 5 }} />\n        \n        {/* Model Results */}\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom sx={{ mb: 3 }}>\n          Model Results\n        </Typography>\n        \n        <Grid container spacing={4}>\n          <Grid item xs={12} md={6}>\n            <Card sx={{ height: '100%' }}>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Key Findings\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                  Based on our regression analysis, we found significant differences in how living area affects house prices \n                  across the three neighborhoods:\n                </Typography>\n                <ul>\n                  <li>\n                    <Typography variant=\"body1\">\n                      <strong>NAmes:</strong> For every 100 square feet of additional living area, sale price increases by approximately \n                      <span className=\"highlight\"> $9,800</span> (95% CI: $8,200 - $11,400)\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      <strong>Edwards:</strong> For every 100 square feet of additional living area, sale price increases by approximately \n                      <span className=\"highlight\"> $7,600</span> (95% CI: $6,100 - $9,100)\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      <strong>BrkSide:</strong> For every 100 square feet of additional living area, sale price increases by approximately \n                      <span className=\"highlight\"> $8,200</span> (95% CI: $6,500 - $9,900)\n                    </Typography>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Card sx={{ height: '100%' }}>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>\n                  Model Comparison\n                </Typography>\n                <Typography variant=\"body1\" paragraph>\n                  We compared three competing models:\n                </Typography>\n                <ol>\n                  <li>\n                    <Typography variant=\"body1\">\n                      <strong>Model 1:</strong> Simple linear regression with GrLivArea as the predictor\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      <strong>Model 2:</strong> Multiple regression with GrLivArea and Neighborhood as predictors\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      <strong>Model 3:</strong> Multiple regression with interaction between GrLivArea and Neighborhood\n                    </Typography>\n                  </li>\n                </ol>\n                <Typography variant=\"body1\" paragraph>\n                  Model 3 consistently outperformed the other models across all evaluation metrics:\n                </Typography>\n                <ul>\n                  <li>\n                    <Typography variant=\"body1\">\n                      Highest Adjusted R²: 0.712\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      Lowest CV PRESS: 2.34 × 10⁹\n                    </Typography>\n                  </li>\n                  <li>\n                    <Typography variant=\"body1\">\n                      Lowest AIC: 4,721\n                    </Typography>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n        \n        {/* Model Diagnostics */}\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom sx={{ mt: 5, mb: 3 }}>\n          Model Diagnostics\n        </Typography>\n        \n        <Card sx={{ mb: 4 }}>\n          <CardContent>\n            <Typography variant=\"body1\" paragraph>\n              The diagnostic analysis of our model indicates:\n            </Typography>\n            <ul>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Linearity:</strong> The residual plots show a generally random scatter around zero, confirming \n                  the linear relationship between living area and sale price within each neighborhood.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Independence:</strong> The residuals show no significant patterns or autocorrelation, suggesting \n                  independence of observations.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Normality:</strong> The Q-Q plot indicates that residuals are approximately normally distributed, \n                  with slight deviations at the tails.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Equal Variance:</strong> The scale-location plot shows relatively constant variance across the \n                  range of fitted values.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Influential Points:</strong> We identified several houses with high Cook's distance values, but \n                  none exerted undue influence on the model estimates.\n                </Typography>\n              </li>\n            </ul>\n          </CardContent>\n        </Card>\n        \n        {/* Conclusion */}\n        <Typography variant=\"h5\" component=\"h2\" gutterBottom sx={{ mt: 5, mb: 3 }}>\n          Conclusion\n        </Typography>\n        \n        <Card>\n          <CardContent>\n            <Typography variant=\"body1\" paragraph>\n              Our analysis provides Century 21 Ames with valuable insights into how living area affects \n              house prices in their three key neighborhoods:\n            </Typography>\n            <ol>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Neighborhood-Specific Pricing:</strong> The relationship between living area and sale price \n                  varies significantly by neighborhood, with NAmes showing the strongest price-to-area relationship.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Valuation Tool:</strong> The model provides a reliable tool for estimating house values \n                  based on living area within each neighborhood.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Investment Insights:</strong> For homeowners considering renovations to increase living space, \n                  the expected return on investment varies by neighborhood.\n                </Typography>\n              </li>\n              <li>\n                <Typography variant=\"body1\" paragraph>\n                  <strong>Market Positioning:</strong> Century 21 Ames can use these insights to better advise clients \n                  on pricing strategies and neighborhood-specific market dynamics.\n                </Typography>\n              </li>\n            </ol>\n          </CardContent>\n        </Card>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AnalysisCentury21Page;","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport PropTypes from 'prop-types';\n\nconst SEO = ({ \n  title, \n  description, \n  keywords, \n  image, \n  url, \n  breadcrumbs = [],  // New breadcrumbs prop\n  article = false \n}) => {\n  const siteTitle = \"House Prices Analysis | SMU DS 6371 Project\";\n  const defaultDescription = \"A comprehensive analysis of housing prices in Ames, Iowa using advanced regression techniques - created as part of the DS 6371 Statistical Analysis course at Southern Methodist University.\";\n  const defaultKeywords = \"data science, housing prices, statistical analysis, regression, Ames Iowa, SMU, house price prediction, Kaggle competition, housing market analysis\";\n  const defaultImage = `${process.env.PUBLIC_URL}/assets/img/project-preview.jpg`;\n  const siteUrl = \"https://jonx0037.github.io/DS_6371_Project\";\n  \n  const seo = {\n    title: title ? `${title} | ${siteTitle}` : siteTitle,\n    description: description || defaultDescription,\n    keywords: keywords || defaultKeywords,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${url || ''}`,\n    article: article\n  };\n\n  // Generate BreadcrumbList schema if breadcrumbs are provided\n  const breadcrumbListSchema = breadcrumbs.length > 0 ? {\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"BreadcrumbList\",\n    \"itemListElement\": breadcrumbs.map((item, index) => ({\n      \"@type\": \"ListItem\",\n      \"position\": index + 1,\n      \"name\": item.name,\n      \"item\": `${siteUrl}${item.url}`\n    }))\n  } : null;\n\n  return (\n    <Helmet>\n      <title>{seo.title}</title>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"keywords\" content={seo.keywords} />\n      \n      {/* OpenGraph tags for social media */}\n      <meta property=\"og:title\" content={seo.title} />\n      <meta property=\"og:description\" content={seo.description} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:type\" content={seo.article ? 'article' : 'website'} />\n      \n      {/* Twitter tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:title\" content={seo.title} />\n      <meta name=\"twitter:description\" content={seo.description} />\n      <meta name=\"twitter:image\" content={seo.image} />\n      \n      {/* Canonical URL */}\n      <link rel=\"canonical\" href={seo.url} />\n      \n      {/* BreadcrumbList structured data */}\n      {breadcrumbListSchema && (\n        <script type=\"application/ld+json\">\n          {JSON.stringify(breadcrumbListSchema)}\n        </script>\n      )}\n    </Helmet>\n  );\n};\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n  keywords: PropTypes.string,\n  image: PropTypes.string,\n  url: PropTypes.string,\n  breadcrumbs: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired\n    })\n  ),\n  article: PropTypes.bool,\n};\n\nexport default SEO;"],"names":["sampleData","NAmes","GrLivArea","SalePrice","color","Edwards","BrkSide","NeighborhoodPricePlot","selectedNeighborhoods","setSelectedNeighborhoods","useState","showRegression","setShowRegression","showConfidence","setShowConfidence","handleNeighborhoodChange","event","target","name","checked","plotData","Object","keys","forEach","neighborhood","push","x","y","type","mode","marker","size","xMean","reduce","a","b","length","yMean","numerator","denominator","i","slope","intercept","minX","Math","min","maxX","max","lineX","lineY","line","width","showlegend","dash","fill","fillcolor","replace","neighborhoodStats","generateNeighborhoodStats","stats","prices","areas","count","meanPrice","medianPrice","sort","floor","meanArea","medianArea","pricePerSqFt","_jsx","Card","className","children","_jsxs","CardContent","Typography","variant","component","gutterBottom","Grid","container","spacing","item","xs","md","Plot","data","layout","title","xaxis","yaxis","tickformat","hovermode","legend","autosize","height","margin","l","r","t","pad","style","useResizeHandler","config","responsive","Box","sx","mb","FormGroup","FormControlLabel","control","Checkbox","onChange","label","e","disabled","mt","overflowX","borderCollapse","textAlign","padding","borderBottom","map","stat","toLocaleString","undefined","maximumFractionDigits","AnalysisCentury21Page","Container","maxWidth","SEO","description","keywords","url","breadcrumbs","my","paragraph","display","justifyContent","Button","endIcon","OpenInNewIcon","href","rel","Divider","_ref","image","article","siteTitle","siteUrl","seo","breadcrumbListSchema","index","Helmet","content","property","JSON","stringify"],"sourceRoot":""}